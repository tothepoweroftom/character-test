{"id":"node_modules/sentence-splitter/lib/parser/PairMaker.js","dependencies":[{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/PairMaker.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/src/parser/PairMaker.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/package.json","includedInParent":true,"mtime":1563189193141},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/package.json","includedInParent":true,"mtime":1563189192585},{"name":"../logger","loc":{"line":3,"column":23},"parent":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/PairMaker.js","resolved":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/logger.js"},{"name":"object.values","loc":{"line":4,"column":21},"parent":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/PairMaker.js","resolved":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/object.values/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar logger_1 = require(\"../logger\");\nvar values = require(\"object.values\");\n/**\n * Mark pair character\n * PairMarker aim to mark pair string as a single sentence.\n *\n * For example, Following sentence has two period(。). but it should treat a single sentence\n *\n * > I hear \"I'm back to home.\" from radio.\n *\n */\nvar PairMaker = /** @class */ (function () {\n    function PairMaker() {\n        var _a;\n        this.pairs = (_a = {},\n            _a[\"\\\"\"] = \"\\\"\",\n            _a[\"\\u300C\"] = \"\\u300D\",\n            _a[\"\\uFF08\"] = \"\\uFF09\",\n            _a[\"(\"] = \")\",\n            _a[\"\\u300E\"] = \"\\u300F\",\n            _a[\"\\u3010\"] = \"\\u3011\",\n            _a);\n        this.pairKeys = Object.keys(this.pairs);\n        this.pairValues = values(this.pairs);\n    }\n    PairMaker.prototype.mark = function (sourceCode) {\n        var string = sourceCode.read();\n        if (!string) {\n            return;\n        }\n        // if current is in a context, should not start other context.\n        // PairMaker does not support nest context by design.\n        if (!sourceCode.isInContext()) {\n            var keyIndex = this.pairKeys.indexOf(string);\n            if (keyIndex !== -1) {\n                var key = this.pairKeys[keyIndex];\n                logger_1.debugLog(\"PairMaker -> enterContext: \" + key);\n                sourceCode.enterContext(key);\n            }\n        }\n        else {\n            // check that string is end mark?\n            var valueIndex = this.pairValues.indexOf(string);\n            if (valueIndex !== -1) {\n                var key = this.pairKeys[valueIndex];\n                logger_1.debugLog(\"PairMaker -> leaveContext: \" + this.pairValues[valueIndex]);\n                sourceCode.leaveContext(key);\n            }\n        }\n    };\n    return PairMaker;\n}());\nexports.PairMaker = PairMaker;\n"},"sourceMaps":{"js":{"version":3,"file":"PairMaker.js","sourceRoot":"","sources":["../../src/parser/PairMaker.ts"],"names":[],"mappings":";;AAEA,oCAAqC;AAErC,IAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAExC;;;;;;;;GAQG;AACH;IAAA;;QACY,UAAK;YACT,GAAC,IAAG,IAAG,IAAG;YACV,GAAC,QAAG,IAAG,QAAG;YACV,GAAC,QAAG,IAAG,QAAG;YACV,GAAC,GAAG,IAAG,GAAG;YACV,GAAC,QAAG,IAAG,QAAG;YACV,GAAC,QAAG,IAAG,QAAG;gBACZ;QACM,aAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,eAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IA0B5C,CAAC;IAxBG,wBAAI,GAAJ,UAAK,UAAsB;QACvB,IAAM,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE;YACT,OAAO;SACV;QACD,8DAA8D;QAC9D,qDAAqD;QACrD,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,EAAE;YAC3B,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,QAAQ,KAAK,CAAC,CAAC,EAAE;gBACjB,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACpC,iBAAQ,CAAC,gCAA8B,GAAK,CAAC,CAAC;gBAC9C,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aAChC;SACJ;aAAM;YACH,iCAAiC;YACjC,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACnD,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;gBACnB,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBACtC,iBAAQ,CAAC,gCAA8B,IAAI,CAAC,UAAU,CAAC,UAAU,CAAG,CAAC,CAAC;gBACtE,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aAChC;SACJ;IACL,CAAC;IACL,gBAAC;AAAD,CAAC,AApCD,IAoCC;AApCY,8BAAS","sourcesContent":["import { SourceCode } from \"./SourceCode\";\nimport { AbstractMarker } from \"./AbstractMarker\";\nimport { debugLog } from \"../logger\";\n\nconst values = require(\"object.values\");\n\n/**\n * Mark pair character\n * PairMarker aim to mark pair string as a single sentence.\n *\n * For example, Following sentence has two period(。). but it should treat a single sentence\n *\n * > I hear \"I'm back to home.\" from radio.\n *\n */\nexport class PairMaker implements AbstractMarker {\n    private pairs = {\n        [`\"`]: `\"`,\n        [`「`]: `」`,\n        [`（`]: `）`,\n        [`(`]: `)`,\n        [`『`]: `』`,\n        [`【`]: `】`\n    };\n    private pairKeys = Object.keys(this.pairs);\n    private pairValues = values(this.pairs);\n\n    mark(sourceCode: SourceCode): void {\n        const string = sourceCode.read();\n        if (!string) {\n            return;\n        }\n        // if current is in a context, should not start other context.\n        // PairMaker does not support nest context by design.\n        if (!sourceCode.isInContext()) {\n            const keyIndex = this.pairKeys.indexOf(string);\n            if (keyIndex !== -1) {\n                const key = this.pairKeys[keyIndex];\n                debugLog(`PairMaker -> enterContext: ${key}`);\n                sourceCode.enterContext(key);\n            }\n        } else {\n            // check that string is end mark?\n            const valueIndex = this.pairValues.indexOf(string);\n            if (valueIndex !== -1) {\n                const key = this.pairKeys[valueIndex];\n                debugLog(`PairMaker -> leaveContext: ${this.pairValues[valueIndex]}`);\n                sourceCode.leaveContext(key);\n            }\n        }\n    }\n}\n"]}},"error":null,"hash":"4ee514dcbdfc0fc48510d0529468c631","cacheData":{"env":{}}}