{"id":"node_modules/sentence-splitter/lib/parser/NewLineParser.js","dependencies":[{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/NewLineParser.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/src/parser/NewLineParser.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/package.json","includedInParent":true,"mtime":1563189193141},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/package.json","includedInParent":true,"mtime":1563189192585}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * New Line Parser\n */\nvar NewLineParser = /** @class */ (function () {\n    function NewLineParser() {\n    }\n    NewLineParser.prototype.test = function (sourceCode) {\n        var string = sourceCode.read();\n        if (!string) {\n            return false;\n        }\n        return /[\\r\\n]/.test(string);\n    };\n    NewLineParser.prototype.seek = function (sourceCode) {\n        while (this.test(sourceCode)) {\n            sourceCode.peek();\n        }\n    };\n    return NewLineParser;\n}());\nexports.NewLineParser = NewLineParser;\n"},"sourceMaps":{"js":{"version":3,"file":"NewLineParser.js","sourceRoot":"","sources":["../../src/parser/NewLineParser.ts"],"names":[],"mappings":";;AAGA;;GAEG;AACH;IAAA;IAcA,CAAC;IAbG,4BAAI,GAAJ,UAAK,UAAsB;QACvB,IAAM,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED,4BAAI,GAAJ,UAAK,UAAsB;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC1B,UAAU,CAAC,IAAI,EAAE,CAAC;SACrB;IACL,CAAC;IACL,oBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,sCAAa","sourcesContent":["import { SourceCode } from \"./SourceCode\";\nimport { AbstractParser } from \"./AbstractParser\";\n\n/**\n * New Line Parser\n */\nexport class NewLineParser implements AbstractParser {\n    test(sourceCode: SourceCode) {\n        const string = sourceCode.read();\n        if (!string) {\n            return false;\n        }\n        return /[\\r\\n]/.test(string);\n    }\n\n    seek(sourceCode: SourceCode): void {\n        while (this.test(sourceCode)) {\n            sourceCode.peek();\n        }\n    }\n}\n"]}},"error":null,"hash":"da72a6e8aa624a94851104b6f5761442","cacheData":{"env":{}}}