{"id":"node_modules/sentence-splitter/lib/parser/AbbrMarker.js","dependencies":[{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/AbbrMarker.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/src/parser/AbbrMarker.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/package.json","includedInParent":true,"mtime":1563189193141},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/package.json","includedInParent":true,"mtime":1563189192585},{"name":"./lang/English","loc":{"line":3,"column":24},"parent":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/AbbrMarker.js","resolved":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/lang/English.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar English_1 = require(\"./lang/English\");\nvar isCapitalized = function (text) {\n    if (!text || text.length === 0) {\n        return false;\n    }\n    return /^[A-Z]/.test(text);\n};\nvar compareNoCaseSensitive = function (a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n};\n/**\n * abbreviation marker\n */\nvar AbbrMarker = /** @class */ (function () {\n    function AbbrMarker(lang) {\n        if (lang === void 0) { lang = English_1.English; }\n        this.lang = lang;\n    }\n    /**\n     * Get Word\n     * word should have left space and right space,\n     * @param {SourceCode} sourceCode\n     * @param {number} startIndex\n     * @returns {string}\n     */\n    AbbrMarker.prototype.getWord = function (sourceCode, startIndex) {\n        if (startIndex === void 0) { startIndex = 0; }\n        var whiteSpace = /\\s/;\n        var prevChar = sourceCode.read(-1);\n        if (prevChar && !whiteSpace.test(prevChar)) {\n            return \"\";\n        }\n        var word = \"\";\n        var count = startIndex;\n        var char = \"\";\n        while ((char = sourceCode.read(count))) {\n            if (whiteSpace.test(char)) {\n                break;\n            }\n            word += char;\n            count++;\n        }\n        return word;\n    };\n    AbbrMarker.prototype.getPrevWord = function (sourceCode) {\n        var whiteSpace = /\\s/;\n        var count = -1;\n        var char = \"\";\n        while ((char = sourceCode.read(count))) {\n            if (!whiteSpace.test(char)) {\n                break;\n            }\n            count--;\n        }\n        while ((char = sourceCode.read(count))) {\n            if (whiteSpace.test(char)) {\n                break;\n            }\n            count--;\n        }\n        return this.getWord(sourceCode, count + 1);\n    };\n    AbbrMarker.prototype.mark = function (sourceCode) {\n        if (sourceCode.isInContextRange()) {\n            return;\n        }\n        var currentWord = this.getWord(sourceCode);\n        if (currentWord.length === 0) {\n            return;\n        }\n        // Allow: Multi-period abbr\n        // Example: U.S.A\n        if (/^([a-zA-Z]\\.){3,}$/.test(currentWord)) {\n            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        // EXCALAMATION_WORDS\n        // Example: Yahoo!\n        var isMatchedEXCALAMATION_WORDS = this.lang.EXCALAMATION_WORDS.some(function (abbr) {\n            return compareNoCaseSensitive(abbr, currentWord);\n        });\n        if (isMatchedEXCALAMATION_WORDS) {\n            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        // PREPOSITIVE_ABBREVIATIONS\n        // Example: Mr. Fuji\n        var isMatchedPREPOSITIVE_ABBREVIATIONS = this.lang.PREPOSITIVE_ABBREVIATIONS.some(function (abbr) {\n            return compareNoCaseSensitive(abbr, currentWord);\n        });\n        if (isMatchedPREPOSITIVE_ABBREVIATIONS) {\n            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        // ABBREVIATIONS\n        var isMatched = this.lang.ABBREVIATIONS.some(function (abbr) {\n            return compareNoCaseSensitive(abbr, currentWord);\n        });\n        var prevWord = this.getPrevWord(sourceCode);\n        var nextWord = this.getWord(sourceCode, currentWord.length + 1);\n        // console.log(\"prevWord\", prevWord);\n        // console.log(\"currentWord\", currentWord);\n        // console.log(\"nextWord\", nextWord);\n        // Special case: Capital <ABBR>. Capital\n        // Example: `I` as a sentence boundary and `I` as an abbreviation\n        // > We make a good team, you and I. Did you see Albert I. Jones yesterday?\n        if (isCapitalized(prevWord) && /[A-Z]\\./.test(currentWord) && isCapitalized(nextWord)) {\n            sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        else if (isMatched && !isCapitalized(nextWord)) {\n            // Exception. This allow to write Capitalized word at next word\n            // A.M. is store.\n            sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n    };\n    return AbbrMarker;\n}());\nexports.AbbrMarker = AbbrMarker;\n"},"sourceMaps":{"js":{"version":3,"file":"AbbrMarker.js","sourceRoot":"","sources":["../../src/parser/AbbrMarker.ts"],"names":[],"mappings":"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","sourcesContent":["import { SourceCode } from \"./SourceCode\";\nimport { Language } from \"./lang/LanguageInterface\";\nimport { English } from \"./lang/English\";\nimport { AbstractMarker } from \"./AbstractMarker\";\n\nconst isCapitalized = (text: string) => {\n    if (!text || text.length === 0) {\n        return false;\n    }\n    return /^[A-Z]/.test(text);\n};\n\nconst compareNoCaseSensitive = (a: string, b: string): boolean => {\n    return a.toLowerCase() === b.toLowerCase();\n};\n\n/**\n * abbreviation marker\n */\nexport class AbbrMarker implements AbstractMarker {\n    private lang: Language;\n\n    constructor(lang: Language = English) {\n        this.lang = lang;\n    }\n\n    /**\n     * Get Word\n     * word should have left space and right space,\n     * @param {SourceCode} sourceCode\n     * @param {number} startIndex\n     * @returns {string}\n     */\n    private getWord(sourceCode: SourceCode, startIndex: number = 0): string {\n        const whiteSpace = /\\s/;\n        const prevChar = sourceCode.read(-1);\n        if (prevChar && !whiteSpace.test(prevChar)) {\n            return \"\";\n        }\n        let word = \"\";\n        let count = startIndex;\n        let char: boolean | string = \"\";\n        while ((char = sourceCode.read(count))) {\n            if (whiteSpace.test(char)) {\n                break;\n            }\n            word += char;\n            count++;\n        }\n        return word;\n    }\n\n    private getPrevWord(sourceCode: SourceCode): string {\n        const whiteSpace = /\\s/;\n        let count = -1;\n        let char: boolean | string = \"\";\n        while ((char = sourceCode.read(count))) {\n            if (!whiteSpace.test(char)) {\n                break;\n            }\n            count--;\n        }\n        while ((char = sourceCode.read(count))) {\n            if (whiteSpace.test(char)) {\n                break;\n            }\n            count--;\n        }\n        return this.getWord(sourceCode, count + 1);\n    }\n\n    mark(sourceCode: SourceCode) {\n        if (sourceCode.isInContextRange()) {\n            return;\n        }\n        const currentWord = this.getWord(sourceCode);\n        if (currentWord.length === 0) {\n            return;\n        }\n        // Allow: Multi-period abbr\n        // Example: U.S.A\n        if (/^([a-zA-Z]\\.){3,}$/.test(currentWord)) {\n            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        // EXCALAMATION_WORDS\n        // Example: Yahoo!\n        const isMatchedEXCALAMATION_WORDS = this.lang.EXCALAMATION_WORDS.some(abbr => {\n            return compareNoCaseSensitive(abbr, currentWord);\n        });\n        if (isMatchedEXCALAMATION_WORDS) {\n            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        // PREPOSITIVE_ABBREVIATIONS\n        // Example: Mr. Fuji\n        const isMatchedPREPOSITIVE_ABBREVIATIONS = this.lang.PREPOSITIVE_ABBREVIATIONS.some(abbr => {\n            return compareNoCaseSensitive(abbr, currentWord);\n        });\n        if (isMatchedPREPOSITIVE_ABBREVIATIONS) {\n            return sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n        // ABBREVIATIONS\n        const isMatched = this.lang.ABBREVIATIONS.some(abbr => {\n            return compareNoCaseSensitive(abbr, currentWord);\n        });\n        const prevWord = this.getPrevWord(sourceCode);\n        const nextWord = this.getWord(sourceCode, currentWord.length + 1);\n        // console.log(\"prevWord\", prevWord);\n        // console.log(\"currentWord\", currentWord);\n        // console.log(\"nextWord\", nextWord);\n        // Special case: Capital <ABBR>. Capital\n        // Example: `I` as a sentence boundary and `I` as an abbreviation\n        // > We make a good team, you and I. Did you see Albert I. Jones yesterday?\n        if (isCapitalized(prevWord) && /[A-Z]\\./.test(currentWord) && isCapitalized(nextWord)) {\n            sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        } else if (isMatched && !isCapitalized(nextWord)) {\n            // Exception. This allow to write Capitalized word at next word\n            // A.M. is store.\n            sourceCode.markContextRange([sourceCode.offset, sourceCode.offset + currentWord.length]);\n        }\n    }\n}\n"]}},"error":null,"hash":"cc4e6d119c8ab54f546215d2d96d5a7a","cacheData":{"env":{}}}