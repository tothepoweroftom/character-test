{"id":"node_modules/sentence-splitter/lib/parser/SeparatorParser.js","dependencies":[{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/lib/parser/SeparatorParser.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/src/parser/SeparatorParser.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/package.json","includedInParent":true,"mtime":1563189193141},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/sentence-splitter/package.json","includedInParent":true,"mtime":1563189192585}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar separatorPattern = /[.．。?!？！]/;\n/**\n * Separator parser\n */\nvar SeparatorParser = /** @class */ (function () {\n    function SeparatorParser() {\n    }\n    SeparatorParser.prototype.test = function (sourceCode) {\n        if (sourceCode.isInContext()) {\n            return false;\n        }\n        if (sourceCode.isInContextRange()) {\n            return false;\n        }\n        var firstChar = sourceCode.read();\n        var nextChar = sourceCode.read(1);\n        if (!firstChar) {\n            return false;\n        }\n        if (!separatorPattern.test(firstChar)) {\n            return false;\n        }\n        // Need space after period\n        // Example: This is a pen. This it not a pen.\n        // It will avoid false-position like `1.23`\n        if (firstChar === \".\") {\n            if (nextChar) {\n                return /[\\s\\t\\r\\n]/.test(nextChar);\n            }\n            else {\n                return true;\n            }\n        }\n        return true;\n    };\n    SeparatorParser.prototype.seek = function (sourceCode) {\n        while (this.test(sourceCode)) {\n            sourceCode.peek();\n        }\n    };\n    return SeparatorParser;\n}());\nexports.SeparatorParser = SeparatorParser;\n"},"sourceMaps":{"js":{"version":3,"file":"SeparatorParser.js","sourceRoot":"","sources":["../../src/parser/SeparatorParser.ts"],"names":[],"mappings":";;AAGA,IAAM,gBAAgB,GAAG,WAAW,CAAC;AAErC;;GAEG;AACH;IAAA;IAkCA,CAAC;IAjCG,8BAAI,GAAJ,UAAK,UAAsB;QACvB,IAAI,UAAU,CAAC,WAAW,EAAE,EAAE;YAC1B,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,UAAU,CAAC,gBAAgB,EAAE,EAAE;YAC/B,OAAO,KAAK,CAAC;SAChB;QACD,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QACpC,IAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,CAAC,SAAS,EAAE;YACZ,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACnC,OAAO,KAAK,CAAC;SAChB;QACD,0BAA0B;QAC1B,6CAA6C;QAC7C,2CAA2C;QAC3C,IAAI,SAAS,KAAK,GAAG,EAAE;YACnB,IAAI,QAAQ,EAAE;gBACV,OAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACtC;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,8BAAI,GAAJ,UAAK,UAAsB;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC1B,UAAU,CAAC,IAAI,EAAE,CAAC;SACrB;IACL,CAAC;IACL,sBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,0CAAe","sourcesContent":["import { SourceCode } from \"./SourceCode\";\nimport { AbstractParser } from \"./AbstractParser\";\n\nconst separatorPattern = /[.．。?!？！]/;\n\n/**\n * Separator parser\n */\nexport class SeparatorParser implements AbstractParser {\n    test(sourceCode: SourceCode) {\n        if (sourceCode.isInContext()) {\n            return false;\n        }\n        if (sourceCode.isInContextRange()) {\n            return false;\n        }\n        const firstChar = sourceCode.read();\n        const nextChar = sourceCode.read(1);\n        if (!firstChar) {\n            return false;\n        }\n        if (!separatorPattern.test(firstChar)) {\n            return false;\n        }\n        // Need space after period\n        // Example: This is a pen. This it not a pen.\n        // It will avoid false-position like `1.23`\n        if (firstChar === \".\") {\n            if (nextChar) {\n                return /[\\s\\t\\r\\n]/.test(nextChar);\n            } else {\n                return true;\n            }\n        }\n        return true;\n    }\n\n    seek(sourceCode: SourceCode): void {\n        while (this.test(sourceCode)) {\n            sourceCode.peek();\n        }\n    }\n}\n"]}},"error":null,"hash":"8195bdff709ec353559a7d3762c2ddd6","cacheData":{"env":{}}}