{"id":"node_modules/@textlint/ast-node-types/lib/index.js","dependencies":[{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/@textlint/ast-node-types/lib/index.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/@textlint/ast-node-types/src/index.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/package.json","includedInParent":true,"mtime":1563189193141},{"name":"/Users/tom/Documents/GitHub/fabricating-alternatives-004/node_modules/@textlint/ast-node-types/package.json","includedInParent":true,"mtime":1563189192585}],"generated":{"js":"// MIT © 2017 azu\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ASTNodeTypes;\n(function (ASTNodeTypes) {\n    ASTNodeTypes[\"Document\"] = \"Document\";\n    ASTNodeTypes[\"DocumentExit\"] = \"Document:exit\";\n    ASTNodeTypes[\"Paragraph\"] = \"Paragraph\";\n    ASTNodeTypes[\"ParagraphExit\"] = \"Paragraph:exit\";\n    ASTNodeTypes[\"BlockQuote\"] = \"BlockQuote\";\n    ASTNodeTypes[\"BlockQuoteExit\"] = \"BlockQuote:exit\";\n    ASTNodeTypes[\"ListItem\"] = \"ListItem\";\n    ASTNodeTypes[\"ListItemExit\"] = \"ListItem:exit\";\n    ASTNodeTypes[\"List\"] = \"List\";\n    ASTNodeTypes[\"ListExit\"] = \"List:exit\";\n    ASTNodeTypes[\"Header\"] = \"Header\";\n    ASTNodeTypes[\"HeaderExit\"] = \"Header:exit\";\n    ASTNodeTypes[\"CodeBlock\"] = \"CodeBlock\";\n    ASTNodeTypes[\"CodeBlockExit\"] = \"CodeBlock:exit\";\n    ASTNodeTypes[\"HtmlBlock\"] = \"HtmlBlock\";\n    ASTNodeTypes[\"HtmlBlockExit\"] = \"HtmlBlock:exit\";\n    ASTNodeTypes[\"ReferenceDef\"] = \"ReferenceDef\";\n    ASTNodeTypes[\"ReferenceDefExit\"] = \"ReferenceDef:exit\";\n    ASTNodeTypes[\"HorizontalRule\"] = \"HorizontalRule\";\n    ASTNodeTypes[\"HorizontalRuleExit\"] = \"HorizontalRule:exit\";\n    ASTNodeTypes[\"Comment\"] = \"Comment\";\n    ASTNodeTypes[\"CommentExit\"] = \"Comment:exit\";\n    // inline\n    ASTNodeTypes[\"Str\"] = \"Str\";\n    ASTNodeTypes[\"StrExit\"] = \"Str:exit\";\n    ASTNodeTypes[\"Break\"] = \"Break\";\n    ASTNodeTypes[\"BreakExit\"] = \"Break:exit\";\n    ASTNodeTypes[\"Emphasis\"] = \"Emphasis\";\n    ASTNodeTypes[\"EmphasisExit\"] = \"Emphasis:exit\";\n    ASTNodeTypes[\"Strong\"] = \"Strong\";\n    ASTNodeTypes[\"StrongExit\"] = \"Strong:exit\";\n    ASTNodeTypes[\"Html\"] = \"Html\";\n    ASTNodeTypes[\"HtmlExit\"] = \"Html:exit\";\n    ASTNodeTypes[\"Link\"] = \"Link\";\n    ASTNodeTypes[\"LinkExit\"] = \"Link:exit\";\n    ASTNodeTypes[\"Image\"] = \"Image\";\n    ASTNodeTypes[\"ImageExit\"] = \"Image:exit\";\n    ASTNodeTypes[\"Code\"] = \"Code\";\n    ASTNodeTypes[\"CodeExit\"] = \"Code:exit\";\n    ASTNodeTypes[\"Delete\"] = \"Delete\";\n    ASTNodeTypes[\"DeleteExit\"] = \"Delete:exit\";\n})(ASTNodeTypes = exports.ASTNodeTypes || (exports.ASTNodeTypes = {}));\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,iBAAiB;AACjB,YAAY,CAAC;;AASb,IAAY,YA0CX;AA1CD,WAAY,YAAY;IACpB,qCAAqB,CAAA;IACrB,8CAA8B,CAAA;IAC9B,uCAAuB,CAAA;IACvB,gDAAgC,CAAA;IAChC,yCAAyB,CAAA;IACzB,kDAAkC,CAAA;IAClC,qCAAqB,CAAA;IACrB,8CAA8B,CAAA;IAC9B,6BAAa,CAAA;IACb,sCAAsB,CAAA;IACtB,iCAAiB,CAAA;IACjB,0CAA0B,CAAA;IAC1B,uCAAuB,CAAA;IACvB,gDAAgC,CAAA;IAChC,uCAAuB,CAAA;IACvB,gDAAgC,CAAA;IAChC,6CAA6B,CAAA;IAC7B,sDAAsC,CAAA;IACtC,iDAAiC,CAAA;IACjC,0DAA0C,CAAA;IAC1C,mCAAmB,CAAA;IACnB,4CAA4B,CAAA;IAC5B,SAAS;IACT,2BAAW,CAAA;IACX,oCAAoB,CAAA;IACpB,+BAAe,CAAA;IACf,wCAAwB,CAAA;IACxB,qCAAqB,CAAA;IACrB,8CAA8B,CAAA;IAC9B,iCAAiB,CAAA;IACjB,0CAA0B,CAAA;IAC1B,6BAAa,CAAA;IACb,sCAAsB,CAAA;IACtB,6BAAa,CAAA;IACb,sCAAsB,CAAA;IACtB,+BAAe,CAAA;IACf,wCAAwB,CAAA;IACxB,6BAAa,CAAA;IACb,sCAAsB,CAAA;IACtB,iCAAiB,CAAA;IACjB,0CAA0B,CAAA;AAC9B,CAAC,EA1CW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QA0CvB","sourcesContent":["// MIT © 2017 azu\n\"use strict\";\n\n/**\n * AST Node types list on TxtNode.\n * Constant value of types\n * @see https://github.com/textlint/textlint/blob/master/docs/txtnode.md\n */\nimport { TypeofTxtNode } from \"./TypeofTxtNode\";\n\nexport enum ASTNodeTypes {\n    Document = \"Document\",\n    DocumentExit = \"Document:exit\",\n    Paragraph = \"Paragraph\",\n    ParagraphExit = \"Paragraph:exit\",\n    BlockQuote = \"BlockQuote\",\n    BlockQuoteExit = \"BlockQuote:exit\",\n    ListItem = \"ListItem\",\n    ListItemExit = \"ListItem:exit\",\n    List = \"List\",\n    ListExit = \"List:exit\",\n    Header = \"Header\",\n    HeaderExit = \"Header:exit\",\n    CodeBlock = \"CodeBlock\",\n    CodeBlockExit = \"CodeBlock:exit\",\n    HtmlBlock = \"HtmlBlock\",\n    HtmlBlockExit = \"HtmlBlock:exit\",\n    ReferenceDef = \"ReferenceDef\",\n    ReferenceDefExit = \"ReferenceDef:exit\",\n    HorizontalRule = \"HorizontalRule\",\n    HorizontalRuleExit = \"HorizontalRule:exit\",\n    Comment = \"Comment\",\n    CommentExit = \"Comment:exit\",\n    // inline\n    Str = \"Str\",\n    StrExit = \"Str:exit\",\n    Break = \"Break\", // well-known Hard Break\n    BreakExit = \"Break:exit\", // well-known Hard Break\n    Emphasis = \"Emphasis\",\n    EmphasisExit = \"Emphasis:exit\",\n    Strong = \"Strong\",\n    StrongExit = \"Strong:exit\",\n    Html = \"Html\",\n    HtmlExit = \"Html:exit\",\n    Link = \"Link\",\n    LinkExit = \"Link:exit\",\n    Image = \"Image\",\n    ImageExit = \"Image:exit\",\n    Code = \"Code\",\n    CodeExit = \"Code:exit\",\n    Delete = \"Delete\",\n    DeleteExit = \"Delete:exit\"\n}\n\n/**\n * Key of ASTNodeTypes or any string\n * For example, TxtNodeType is \"Document\".\n */\nexport type TxtNodeType = keyof typeof ASTNodeTypes | string;\n\n/**\n * Type utility for TxtNodeType\n * Return TxtNode interface for the TxtNodeTYpe\n */\nexport { TypeofTxtNode };\n\n/**\n * Any TxtNode types\n */\nexport type AnyTxtNode = TxtNode | TxtTextNode | TxtParentNode;\n\n/**\n * Basic TxtNode\n * Probably, Real TxtNode implementation has more properties.\n */\nexport interface TxtNode {\n    type: TxtNodeType;\n    raw: string;\n    range: TextNodeRange;\n    loc: TxtNodeLineLocation;\n    // parent is runtime information\n    // Not need in AST\n    // For example, top Root Node like `Document` has not parent.\n    parent?: TxtNode;\n\n    [index: string]: any;\n}\n\n/**\n * Location\n */\nexport interface TxtNodeLineLocation {\n    start: TxtNodePosition;\n    end: TxtNodePosition;\n}\n\n/**\n * Position's line start with 1.\n * Position's column start with 0.\n * This is for compatibility with JavaScript AST.\n * https://gist.github.com/azu/8866b2cb9b7a933e01fe\n */\nexport interface TxtNodePosition {\n    line: number; // start with 1\n    column: number; // start with 0\n}\n\n/**\n * Range start with 0\n */\nexport type TextNodeRange = [number, number];\n\n/**\n * Text Node.\n * Text Node has inline value.\n * For example, `Str` Node is an TxtTextNode.\n */\nexport interface TxtTextNode extends TxtNode {\n    value: string;\n}\n\n/**\n * Parent Node.\n * Parent Node has children that are consist of TxtNode or TxtTextNode\n */\nexport interface TxtParentNode extends TxtNode {\n    children: Array<TxtNode | TxtTextNode>;\n}\n"]}},"error":null,"hash":"1a6853f3877ea7c1c2f212a1dfcf344c","cacheData":{"env":{}}}